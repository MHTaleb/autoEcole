// JDL definition for application 'autoEcoleV01' generated with command 'jhipster export-jdl'

entity Ecole {
  titreEcole String required unique
}
entity Lesson {
  typeLesson TypeLesson required,
  dateLesson Instant required,
  etatLesson EtatLesson required,
  observation TextBlob
}
entity Car {
  matricule String unique required,
  marque String
}
entity Entraineur {
  photo ImageBlob,
  nom String required,
  prenom String required,
  telephone String required unique pattern(/[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]/)
}
entity Candidat {
  photo ImageBlob,
  nom String required,
  prenom String required,
  pere String required,
  mere String required,
  telephone String required pattern(/[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]/),
  dateInscription LocalDate required,
  dateNaissance LocalDate required,
  lieuNaissance String required,
  nationalite Nationalite required,
  adresse String required,
  nid String unique required
}
entity Virement {
  montant Double required,
  dateVirement Instant required
}
entity Examinateur {
  nom String required,
  prenom String required,
  telephone String pattern(/[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]/)
}
entity Examen {
  dateExamen LocalDate required
}
entity ExamenInfo {
  etat EtatExamen,
  type TypeExamen
}

enum TypeLesson {
  CODE,
  CRENO,
  CIRCULATION,
  AUTRE
}

enum EtatLesson {
  PLANIFIER,
  VALIDER,
  ANNULER,
  ABSENT
}

enum Nationalite {
  ALGERIE,
  MARROC,
  TUNISIE,
  FRANCE,
  AUTRE
}

enum EtatExamen {
  ENCOURS,
  REUSSI,
  PERDU,
  ABSENT,
  INVALIDE
}

enum TypeExamen {
  CODE,
  CRENO,
  CIRCULATION
}

relationship OneToOne {
  Entraineur{compte(login)} to User
}
relationship OneToMany {
  Candidat{lesson} to Lesson{candidat required},
  Car{lesson} to Lesson{voiture(marque)},
  Entraineur{lesson} to Lesson{entraineur(nom) required},
  Candidat{virement} to Virement{candidat(nom) required},
  Car{examen} to Examen{voiture(marque)},
  Examinateur{examen} to Examen{examinateur(nom) required},
  Examen{examenInfo} to ExamenInfo{examen(dateExamen) required},
  Candidat{examenInfo} to ExamenInfo{candidat required}
}
relationship ManyToOne {
  Ecole{president(nom) required} to Entraineur
}

dto Ecole, Lesson, Car, Entraineur, Candidat, Virement, Examinateur, Examen, ExamenInfo with mapstruct
paginate Ecole, Lesson, Car, Entraineur, Candidat, Virement, Examinateur, Examen, ExamenInfo with pagination
service Ecole, Lesson, Car, Entraineur, Candidat, Virement, Examinateur, Examen, ExamenInfo with serviceImpl
